/*
Deployment script for BusinessEventStaging

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "BusinessEventStaging"
:setvar DefaultFilePrefix "BusinessEventStaging"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)] COLLATE SQL_Latin1_General_CP1_CI_AS
GO
PRINT N'Creating [BusinessEventStagingFG99999]...';


GO
ALTER DATABASE [$(DatabaseName)]
    ADD FILEGROUP [BusinessEventStagingFG99999];


GO
ALTER DATABASE [$(DatabaseName)]
    ADD FILE (NAME = [BusinessEventStagingFG99999_316B4653], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_BusinessEventStagingFG99999_316B4653.mdf') TO FILEGROUP [BusinessEventStagingFG99999];


GO
PRINT N'Creating [BusinessEventStagingFG3]...';


GO
ALTER DATABASE [$(DatabaseName)]
    ADD FILEGROUP [BusinessEventStagingFG3];


GO
PRINT N'Creating [BusinessEventStagingFG2]...';


GO
ALTER DATABASE [$(DatabaseName)]
    ADD FILEGROUP [BusinessEventStagingFG2];


GO
PRINT N'Creating [BusinessEventStagingFG1]...';


GO
ALTER DATABASE [$(DatabaseName)]
    ADD FILEGROUP [BusinessEventStagingFG1];


GO
PRINT N'Creating [BusinessEventStagingFG0]...';


GO
ALTER DATABASE [$(DatabaseName)]
    ADD FILEGROUP [BusinessEventStagingFG0];


GO
ALTER DATABASE [$(DatabaseName)]
    ADD FILE (NAME = [BusinessEventStagingFG0_58F34383], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_BusinessEventStagingFG0_58F34383.mdf') TO FILEGROUP [BusinessEventStagingFG0];


GO
PRINT N'Creating [BusinessEventStagingFG3_File1]...';


GO
ALTER DATABASE [$(DatabaseName)]
    ADD FILE (NAME = [BusinessEventStagingFG3_File1], FILENAME = '$(DefaultDataPath)BusinessEventStagingFG3_File1.ndf') TO FILEGROUP [BusinessEventStagingFG3];


GO
PRINT N'Creating [BusinessEventStagingFG99999_File1]...';


GO
ALTER DATABASE [$(DatabaseName)]
    ADD FILE (NAME = [BusinessEventStagingFG99999_File1], FILENAME = '$(DefaultDataPath)BusinessEventStagingFG99999_File1.ndf') TO FILEGROUP [BusinessEventStagingFG3];


GO
PRINT N'Creating [BusinessEventStagingFG2_File1]...';


GO
ALTER DATABASE [$(DatabaseName)]
    ADD FILE (NAME = [BusinessEventStagingFG2_File1], FILENAME = '$(DefaultDataPath)BusinessEventStagingFG2_File1.ndf') TO FILEGROUP [BusinessEventStagingFG2];


GO
PRINT N'Creating [BusinessEventStagingFG1_File1]...';


GO
ALTER DATABASE [$(DatabaseName)]
    ADD FILE (NAME = [BusinessEventStagingFG1_File1], FILENAME = '$(DefaultDataPath)BusinessEventStagingFG1_File1.ndf') TO FILEGROUP [BusinessEventStagingFG1];


GO
PRINT N'Creating [BusinessEventStagingFG0_File1]...';


GO
ALTER DATABASE [$(DatabaseName)]
    ADD FILE (NAME = [BusinessEventStagingFG0_File1], FILENAME = '$(DefaultDataPath)BusinessEventStagingFG0_File1.ndf') TO FILEGROUP [BusinessEventStagingFG1];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [EventStagingProcessor]...';


GO
CREATE LOGIN [EventStagingProcessor]
    WITH PASSWORD = N'splxk#lfteokyv9uooxxorpnmsFT7$!~cy~vocyxokrj';


GO
PRINT N'Creating [EventStagingProcessor]...';


GO
CREATE USER [EventStagingProcessor] FOR LOGIN [EventStagingProcessor];


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'db_datareader', @membername = N'EventStagingProcessor';


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'db_datawriter', @membername = N'EventStagingProcessor';


GO
PRINT N'Creating [EventDateTimePartitionFunction]...';


GO
CREATE PARTITION FUNCTION [EventDateTimePartitionFunction](DATETIMEOFFSET (7))
    AS RANGE
    FOR VALUES (N'01/01/1900 00:00:00 +00:00', N'01/01/2012 00:00:00 +00:00', N'01/01/2013 00:00:00 +00:00');


GO
PRINT N'Creating [EventDateTimePartitionScheme]...';


GO
CREATE PARTITION SCHEME [EventDateTimePartitionScheme]
    AS PARTITION [EventDateTimePartitionFunction]
    TO ([BusinessEventStagingFG0], [BusinessEventStagingFG1], [BusinessEventStagingFG2], [BusinessEventStagingFG3], [BusinessEventStagingFG99999]);


GO
PRINT N'Creating [dbo].[EventRecords]...';


GO
CREATE TABLE [dbo].[EventRecords] (
    [EventDateTime]                      DATETIMEOFFSET (7)    NOT NULL,
    [EventId]                            UNIQUEIDENTIFIER      NOT NULL,
    [EventSequenceNumber]                INT                   NOT NULL,
    [CorrelationId]                      UNIQUEIDENTIFIER      NULL,
    [StreamingEventType]                 TINYINT               NOT NULL,
    [EventClassification]                VARCHAR (1024)        NOT NULL,
    [MachineName]                        VARCHAR (50)          NOT NULL,
    [WindowsIdentityName]                VARCHAR (50)          NOT NULL,
    [SourceAssemblyName]                 VARCHAR (255)         NOT NULL,
    [SourceAssemblyVersion]              VARCHAR (50)          NOT NULL,
    [SourceAssemblyProductName]          VARCHAR (1024)        NOT NULL,
    [SourceAssemblyInformationalVersion] VARCHAR (50)          NOT NULL,
    [SourceAssemblyFileVersion]          VARCHAR (50)          NOT NULL,
    [HttpUserAgent]                      VARCHAR (50) SPARSE   NULL,
    [HttpSessionId]                      VARCHAR (50) SPARSE   NULL,
    [HttpUserHostName]                   VARCHAR (255) SPARSE  NULL,
    [SoapOperationSessionId]             VARCHAR (255) SPARSE  NULL,
    [SoapOperationEndpointAddress]       VARCHAR (1024) SPARSE NULL,
    [LocalTransactionId]                 VARCHAR (50) SPARSE   NULL,
    [DistributedTransactionId]           VARCHAR (50) SPARSE   NULL
) ON [EventDateTimePartitionScheme] ([EventDateTime]);


GO
PRINT N'Creating [dbo].[EventRecords].[IX_EventRecords_Clustered_EventDateTime]...';


GO
CREATE CLUSTERED INDEX [IX_EventRecords_Clustered_EventDateTime]
    ON [dbo].[EventRecords]([EventDateTime] ASC);


GO
PRINT N'Creating [dbo].[EventRecords].[IX_EventRecords_EventId]...';


GO
CREATE NONCLUSTERED INDEX [IX_EventRecords_EventId]
    ON [dbo].[EventRecords]([EventId] ASC, [EventSequenceNumber] ASC, [EventDateTime] ASC)
    ON [EventDateTimePartitionScheme] ([EventDateTime]);


GO
PRINT N'Creating [dbo].[EventRecords].[IX_EventRecords_CorrelationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_EventRecords_CorrelationId]
    ON [dbo].[EventRecords]([CorrelationId] ASC, [EventDateTime] ASC)
    ON [EventDateTimePartitionScheme] ([EventDateTime]);


GO
PRINT N'Creating [dbo].[EventDetails]...';


GO
CREATE TABLE [dbo].[EventDetails] (
    [EventDateTime]        DATETIMEOFFSET (7) NOT NULL,
    [EventId]              UNIQUEIDENTIFIER   NOT NULL,
    [EventSequenceNumber]  INT                NOT NULL,
    [DetailClassification] VARCHAR (1024)     NOT NULL,
    [Dimension]            VARCHAR (MAX)      NOT NULL,
    [Fact]                 VARCHAR (MAX)      NOT NULL
) ON [EventDateTimePartitionScheme] ([EventDateTime]);


GO
PRINT N'Creating [dbo].[EventDetails].[IX_EventFacts_Clustered_EventDateTime]...';


GO
CREATE CLUSTERED INDEX [IX_EventFacts_Clustered_EventDateTime]
    ON [dbo].[EventDetails]([EventDateTime] ASC);


GO
PRINT N'Creating [dbo].[EventDetails].[IX_EventFacts_EventId]...';


GO
CREATE NONCLUSTERED INDEX [IX_EventFacts_EventId]
    ON [dbo].[EventDetails]([EventId] ASC, [EventSequenceNumber] ASC, [EventDateTime] ASC)
    ON [EventDateTimePartitionScheme] ([EventDateTime]);


GO
PRINT N'Creating [dbo].[BusinessKeys]...';


GO
CREATE TABLE [dbo].[BusinessKeys] (
    [EventDateTime]    DATETIMEOFFSET (7) NOT NULL,
    [EventId]          UNIQUEIDENTIFIER   NOT NULL,
    [BusinessKeyName]  VARCHAR (512)      NOT NULL,
    [BusinessKeyValue] VARCHAR (512)      NOT NULL
) ON [EventDateTimePartitionScheme] ([EventDateTime]);


GO
PRINT N'Creating [dbo].[BusinessKeys].[IX_BusinessKeys_Clustered_EventDateTime]...';


GO
CREATE CLUSTERED INDEX [IX_BusinessKeys_Clustered_EventDateTime]
    ON [dbo].[BusinessKeys]([EventDateTime] ASC);


GO
PRINT N'Creating [dbo].[BusinessKeys].[IX_BusinessKeys_EventId]...';


GO
CREATE NONCLUSTERED INDEX [IX_BusinessKeys_EventId]
    ON [dbo].[BusinessKeys]([BusinessKeyValue] ASC, [EventId] ASC, [EventDateTime] ASC)
    ON [EventDateTimePartitionScheme] ([EventDateTime]);


GO
PRINT N'Creating Permission...';


GO
GRANT CONNECT TO [EventStagingProcessor];


GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET MULTI_USER 
    WITH ROLLBACK IMMEDIATE;


GO
PRINT N'Update complete.'
GO
